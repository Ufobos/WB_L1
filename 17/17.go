package main

import "fmt"

// Функция для бинарного поиска.
// Каждую итерацию мы смотрим на значение посередине массива,
// далее, если это значние не соответствует искомому числу, массив делится пополам.
// В зависимости от значения предыдущей попытки (больше или меньше нужного числа),
// мы переходим на одну из половин и находим её середину.
// И так до момента, пока мы не найдём нужный элемент.
func binarySearch(arr []int, target int) int {
	low := 0
	high := len(arr) - 1
	for low <= high {
		mid := (low + high) / 2
		guess := arr[mid]
		switch {
		case guess == target: // Если значение равно нужному, возвращаем его позицию
			return mid
		case guess > target: // Если текущая попытка больше нужного значения, переходим направо
			high = mid - 1
		default: // Если текущая попытка меньше нужного значения, переходим налево
			low = mid + 1
		}
	}
	return -1 // Возвращаем -1, если не нашли нужное число
}

func main() {
	arr := []int{0, 4, 8, 10, 15, 20, 22, 25, 29}
	target := 25
	fmt.Printf("Список - %v\nИщем число %v...\n", arr, target)
	result := binarySearch(arr, target)
	switch result {
	case -1:
		fmt.Println("Такого числа нет в списке!")
	default:
		fmt.Printf("Число найдено в списке на %v позиции!\n", result)
	}
}
